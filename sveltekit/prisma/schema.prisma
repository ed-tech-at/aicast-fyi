// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


model ApiKey {
  id           Int      @id @default(autoincrement())
  endpoint     String?
  key          String?  
  shortcode  String?  
  mailRegex  String?  

  createdDate  DateTime @default(now())
  
}

model Track {
  id           String   @id @default(uuid())
  createdDate  DateTime @default(now())

  email        String
  hashedPw     String?


  URL          String?  

  title        String?
  desc         String?
  
  apiKeyLLM  ApiKey? @relation(fields: [apiKeyLLMId], references: [id], onDelete: SetNull)
  apiKeyLLMId  Int?

  apiKeyAudio  ApiKey? @relation(fields: [apiKeyLLMId], references: [id], onDelete: SetNull)
  apiKeyAudioId  Int?

  updatedDate  DateTime?
  
  visibility   Int  @default(1) // 1... Public, 2... Shared Secret in accessCode, 3... JSON String Array in accessCode
  accessCode  String?

  recycleLLM  Int  @default(1)
  
}


model Episode {
  id             String   @id @default(uuid())
  createdDate    DateTime @default(now())
  
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId    String

  studentName  String?

  answers String?
  
}

model Segment {
  id             String   @id @default(uuid())
  createdDate    DateTime @default(now())

  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId    String

  type           String
  
  text           String?

  studentQuestion  String?
  systemPrompt    String?
  defaultAnswer   String?


  position       Int @default(10)

  //audioVersion   Int?
}

model Audio {
  id           String   @id @default(uuid())
  createdDate  DateTime @default(now())

  folder String?
  
  segment  Segment? @relation(fields: [segmentId], references: [id], onDelete: SetNull)
  segmentId  String?
  
  voice     String
  text         String?
  
  language_code String?
  previousText String?
  nextText String?

  //version   Int?
}

model LLMGeneratedText {
  id              String   @id @default(uuid())
  createdDate     DateTime @default(now())
  
  segment  Segment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  segmentId  String

  studentAnswer          String?
  result          String?
  
}



